<HTML><HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=windows-1252">
	<TITLE>Calculation details (2)</TITLE>
	<META NAME="VIEWPORT" CONTENT="width=device-width">
	<META NAME="KEYWORDS" CONTENT="Applied methods and algoritms;calculation;filtering;flatness;flattened area;Gamma analysis;Ionisatio to Dose conversion;relative flatness;symmetry;">
	<META NAME="AUTHOR" CONTENT="Theo van Soest">
	<META NAME="GENERATOR" CONTENT="HelpScribble 8.3.0">
	<STYLE> span { display: inline-block; }</STYLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">
<P><FONT FACE="Arial" SIZE="2">
<A HREF="manual.htm">Contents</A>
 - <A HREF="idx.htm">Index</A>
 - <A HREF="hs10.htm">Previous</A>
 - <A HREF="hs12.htm">Next</A>
</FONT><HR></P>
<FONT FACE="Arial" COLOR="#0000FF" SIZE="5"><B>Calculation details</B></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="5"><B><HR></B></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="1"><I>general information&nbsp;</I></FONT><BR>
<FONT FACE="Arial" SIZE="2"><B>General remarks</B></FONT><BR>
<FONT FACE="Arial" SIZE="2">The Omnipro software allows measuring points at irregular positions. Moreover, the measuring speed an therefore the measurement point density may be changed during a scan. This implicates that nowhere a regular interval may be expected which complicates all calculations severely. On this page relevant calculation details are explained and shown in (slightly simplified) Delphi code.</FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><A NAME="detailslist"></A></FONT><FONT FACE="Arial" SIZE="2">Contents of this page:</FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1020.htm#datastructures">data structures</A></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1020.htm#prepareprofile">data preparation</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#filtering">filtering and derivative</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#references">reference curves</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#analysis">curve analysis</A></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#generalstrategy">general strategy</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#normalisationofprofiles">normalisation of AB/GT-scans</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#normalisationofdepthdose">normalisation of depth dose scans</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#symmetrycorrection">symmetry correction of profiles</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#d50">profile evaluation</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#penumbra_evaluation">penumbra evaluation</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#flattenedarea">In-Field area</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#wedgefield">wedge field detection</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#flatness">flatness</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#gamma">gamma analysis</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#symmetry">symmetry</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#linacerror">linac symmetry error</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#matchingcode">matching (incomplete) profiles</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#mergingcode">merging partial profiles</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#quadfit">quadratic fits</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#OD2dose">OD to dose conversion</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#ion2dose">Ionisation to dose conversion</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#mayneordcode">Mayneord transform</A></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2">&nbsp;</FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Arial" SIZE="1"><I><STRIKE>back to top</STRIKE></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I>linkTarget=detailslist}</I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><B><A NAME="references"></A></B></FONT><FONT FACE="Arial" SIZE="2"><B>Reference curves</B></FONT><BR>
<FONT FACE="Arial" SIZE="2">When a curve is read, always (if configured to use reference profiles) the reference is reread and resampled to the current dataset (see also </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs50.htm">Save as Reference</A></FONT><FONT FACE="Arial" SIZE="2">).&nbsp;</FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>(*</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>There are multiple sources for references:</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>-a forced reference in memory</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>-the last used reference in memory</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>-a (possible structured) multiple reference in memory</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>-the reference directory</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>This procedure tries all in-memory options first and then searches on disk. Disk search is based on filename only.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>*)</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{13/07/2015 wSource[Unrelated] used to store unmatched reference when valid and not locked.}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/07/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; wSource[RefOrg] used now. Set twDataHistoryStg to twReferenceStg.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; usage of GetCurveIDString}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{01/08/2015 TakeCurrentRefSource and wTakeCurrentRefSource introduced}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{04/08/2015 Readability of code improved.}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{05/08/2015 usage of TakeReferenceOrg which will reset Source[Reference].twAlignedTo}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{18/09/2015 logging}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{16/12/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; for multiscanref files needs equal measured.twScanNr and reforg.twScanNr</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; FRefOrgSrc}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{25/12/2015 for analysis for useorg}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{19/03/2016 added wCheckRefIgnoreLinac, use of referencevalid}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{10/05/2016 logmessage added to CompareCurveIDStrings, ErrorState set}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{30/07/2016 wMultiScanReferences}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{02/08/2016 makecurvename}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{03/08/2016 r.makecurvename(false,..) -&gt; r.makecurvename(r.MultiScanRefOk,..)}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{22/09/2016 if wMultiRefIndex then... changed to if wMultiRefIndex and (Length(FMultiScanList)&gt;0) then...}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{29/09/2016 limited application of renamefile due to lost files...}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{07/10/2016 safety catch: when renaming file new filename should not be empty, use try..except}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{22/10/2016 extra check wSource[twValid] before trusting it}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{28/09/2017 added statusmessage of target}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{01/10/2018 CheckRefOrg: ( (not MultiScanRefUse) or (wSource[dsRefOrg].twCurveIDstring=wSource[dsMeasured].twCurveIDstring))}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/10/2018 CheckRefOrg: ( (not MultiScanRefOk) or (wSource[dsRefOrg].twCurveIDstring=wSource[dsMeasured].twCurveIDstring))}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{09/07/2020 if (not UseOrg) AND (LogLevel&gt;1) then ReportDifferences}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/08/2020 checkreforg made more sensitive for changeover from single scan to array scan}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{24/08/2020 error in parameters of Format for r.ReadData}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.LoadReference(AFileName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2"> =</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">''</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TakeCurrentRefSource:Boolean=False): Boolean;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> r&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : TWellhoferData;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; s,CurveIDstg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : RawByteString;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FromDisk,SameID,GenName,UseOrg: Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; ReportedSrc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcDataSource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; RefScanNr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> LogMessage(ContextStg,ReferenceStg,ResultStg:</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResultValue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALogLevel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :Integer=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (ALogLevel&lt;=LogLevel) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> ((ALogLevel=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> ResultValue)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; ErrorState:= ErrorState </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> ResultValue);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; StatusMessage(Format(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'%s: src=%s | ref=%s | %s'</FONT><FONT FACE="Consolas" SIZE="2">,[ContextStg,GetCurveIDString,ReferenceStg,ifthen(ResultValue,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">''</FONT><FONT FACE="Consolas" SIZE="2">,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'not '</FONT><FONT FACE="Consolas" SIZE="2">)+ResultStg]),True);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> CheckMultiRef(AcceptStream:Boolean=False): Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; AcceptStream:= AcceptStream </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (FRefOrgSrc.Size&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> MultiRefIndex </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Length(FMultiScanList)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">)</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := AcceptStream </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( FArrayScanRefOk </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[dsRefOrg].twValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><FONT FACE="Consolas" SIZE="2">(RefScanNr&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (wSource[dsRefOrg].twScanNr=wSource[dsMeasured].twScanNr)) );</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> CompareCurveIDStrings(MeasStg,RefStg,MeasLinac,RefLinac:</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">): Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCheckRefIgnoreLinac </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; RefStg:= StringReplace(RefStg,RefLinac,LowerCase(MeasLinac),[rfIgnoreCase]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= (RefStg=MeasStg);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; LogMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'ID check'</FONT><FONT FACE="Consolas" SIZE="2">,RefStg,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'ok'</FONT><FONT FACE="Consolas" SIZE="2">,Result,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> CheckRefOrg: Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= wSource[dsRefOrg].twValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[dsRefOrg].twLocked)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( ((</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wCheckRefCurveString) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> wTakeCurrentRefSource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> ReferenceValid(dsRefOrg) ) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( ((</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> ArrayScanRefOk) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[dsRefOrg].twCurveIDstring=wSource[dsMeasured].twCurveIDstring))</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (ArrayScanRefOk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[dsRefOrg].twFileIDstring=wSource[dsMeasured].twFileIDstring)) );</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> LogLevel&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; LogMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'Use Current Ref'</FONT><FONT FACE="Consolas" SIZE="2">+ifthen(ArrayScanRefOk,Format(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">' scan %d'</FONT><FONT FACE="Consolas" SIZE="2">,[wSource[dsMeasured].twScanNr]),</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">''</FONT><FONT FACE="Consolas" SIZE="2">),</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetCurveIDString(dsRefOrg),</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'ok'</FONT><FONT FACE="Consolas" SIZE="2">,Result);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{03/08/2016 wCheckRefIgnoreLinac}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{20/12/2018 i=2: not multiscanlist}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> CheckMultiRefOrgList(ACurveIDString:</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">): Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i,j: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Assigned(FMultiScanList) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp;&nbsp; := Length(FMultiScanList);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; j&nbsp;&nbsp;&nbsp;&nbsp; := Succ(ifthen(wCheckRefIgnoreLinac,Length(wSource[dsRefOrg].twDevice),</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (Result&lt;i) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Copy(FMultiScanList[Result],j,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">100</FONT><FONT FACE="Consolas" SIZE="2">)&lt;&gt;ACurveIDString) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Result);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (Result=i) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (i=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> SetDiskFile(AString:</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">): Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := AString;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result&nbsp; := FileExists(AString);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; LogMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'Find Ref'</FONT><FONT FACE="Consolas" SIZE="2">,CompressedFilename(AString),</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'found'</FONT><FONT FACE="Consolas" SIZE="2">,Result,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//wSource[RefOrg].twValid:= False; {test: force file-load}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Inc(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result&nbsp; := wSource[dsMeasured].twValid;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FromDisk:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">UseOrg&nbsp; := CheckRefOrg;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">RefScanNr:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCheckRefCurveString </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> ReportedSrc:= dsMeasured</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReportedSrc:= dsRefOrg;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; GenName:= AFileName=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">''</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := ReferenceDirectory+ifthen(FArrayScanRefOk,wSource[dsMeasured].twFileIDString,wSource[dsMeasured].twCurveIDString);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; StatusMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'LoadReference-&gt;'</FONT><FONT FACE="Consolas" SIZE="2">+s,True,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> UseOrg </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; CurveIDstg:= wSource[dsMeasured].twCurveIDString;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> GenName </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[dsMeasured] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> MultiRefIndex </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Length(FMultiScanList)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (wTakeCurrentRefSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[dsRefOrg].twScanDevice=wSource[dsMeasured].twScanDevice)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCheckRefIgnoreLinac </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> s:= Copy(CurveIDstg,Length(ApplyAliasList(twDevice))+</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,Length(twCurveIDString))</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s:= CurveIDstg;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RefScanNr:= CheckMultiRefOrgList(s);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> RefScanNr&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UseOrg:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s&nbsp;&nbsp;&nbsp;&nbsp; := FMultiScanList[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UseOrg:= CheckRefOrg </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( CheckMultiRef(True) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (TakeCurrentRefSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> wTakeCurrentRefSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (FRefOrgFileName=s)) );</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> UseOrg) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (AFileName=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">''</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AFileName:= ReferenceDirectory+ifthen(FArrayScanRefOk,twFileIDString,twCurveIDString);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> (UseOrg </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> TakeCurrentRefSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> wTakeCurrentRefSource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromDisk:= SetDiskFile(AFileName) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDiskFile(ReferenceDirectory+MakeCurveName(FArrayScanRefOk,True,[twiSSD]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//exclude ssd</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDiskFile(ReferenceDirectory+MakeCurveName(FArrayScanRefOk,True,[twiDepth]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//exclude depth</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetDiskFile(ReferenceDirectory+MakeCurveName(FArrayScanRefOk,True,[twiDepth,twiSSD]));&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//exclude both</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UseOrg:= (FRefOrgFileName=s) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> CheckRefOrg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//the current file might be good enough now</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{forced read from file}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{useorg}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> UseOrg) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (LogLevel&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; ReportDifferences;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> UseOrg </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (CheckMultiRef(False) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> TakeCurrentRefSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> wTakeCurrentRefSource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> TakeReferenceOrg(CurveIDstg) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; wSource[dsReference&nbsp; ].twAnalysed:= False;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//the settings might have been changed, so analyse completely</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; wSource[dsRefFiltered].twAnalysed:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; StatusMessage(twcDataSourceNames[dsReference]+</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">' -&gt; '</FONT><FONT FACE="Consolas" SIZE="2">+GetCurveIDString(ReportedSrc));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> AlignReference </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlignCurves</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Analyse(dsReference);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FromDisk </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> UseOrg </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><FONT FACE="Consolas" SIZE="2">(RefScanNr&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><FONT FACE="Consolas" SIZE="2">(</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> (TakeCurrentRefSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> wTakeCurrentRefSource))) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> CheckMultiRef(True)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; r:= TWellhoferData.Create;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; PassSettings(r,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'reference'</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; r.AutoLoadReference:= False;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//***** prevent loop! *****</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FromDisk </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((FRefOrgFileName&lt;&gt;s) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[dsRefOrg].twValid)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//if multiscanfile already in memory, then don't open it from file again</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StatusMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'-&gt;LoadReference '</FONT><FONT FACE="Consolas" SIZE="2">+CompressedFilename(s),True,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromDisk:= r.ReadData(s);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromDisk:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FromDisk </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.Parser.PreLoaded:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetReferenceOrg(dsMeasured,True,r);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//transfer also the raw data from a possibly multi-dataset</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> MultiRefIndex </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> r.IndexMultiScan(s,GetCurveIDString) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//IndexMultiScan will try to take the apropriate curve</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FMultiScanList:= r.FMultiScanList;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF MULTIREF_INDEX}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.Filename&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := s;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.ObjectCallSign:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'multi-ref'</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//just for debugging purposes</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.wMultiScanNr&nbsp; := ifthen(MultiRefIndex,RefScanNr,wMultiScanNr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//set which scan to read from multi-dataset</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.wMultiScanMax := RefScanNr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//may speed up reading considerably</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StatusMessage(Format(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'-&gt;LoadReference %s [%d/%d]'</FONT><FONT FACE="Consolas" SIZE="2">,[CompressedFilename(s),r.wMultiScanNr,r.wMultiScanMax]));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromDisk:= r.ReadData(FRefOrgSrc,FRefOrgSrcType);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//read scan from possibly multi-dataset out of saved stream</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromDisk:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; SameID:= r.Analyse </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> CompareCurveIDStrings(GetCurveIDString,r.GetCurveIDString,Linac,r.Linac); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//=&gt; prepareprofile =&gt; fastscan(measured) =&gt; twCenterPosValid</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= FromDisk </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wCheckRefCurveString) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> SameID);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//true when file read&amp;analysed and (has the correct id (or can be ignored))</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CopyCurve(r.wSource[dsMeasured],wSource[dsReference]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClearCurve(dsRefFiltered);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[dsReference].twDataHistoryStg:= twcDataSourceNames[dsReference];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[dsReference].twFastScan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[dsRefOrg].twLocked </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CopyCurve(r.wSource[dsMeasured],wSource[dsRefOrg]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> AlignReference </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AlignCurves;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Warning:= Format(twForFileNotRead,[CompressedFilename(s)]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FromDisk&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> GenName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Length(AFileName)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (s&lt;&gt;AFileName) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (r.wMultiScanMax=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (s&lt;&gt;FileName) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> FileExists(s) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (ExtractFilePath(s)=ExtractFilePath(AFileName)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> FileExists(AFileName)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RenameFile(s,AFilename);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{do nothing}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeAndNil(r);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExceptMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'WH.LoadReference!'</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Warning:= Format(twForFileNotFound,[CompressedFilename(s)]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; ClearCurve(dsReference);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Dec(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~loadreference}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><B><A NAME="analysis"></A></B></FONT><FONT FACE="Arial" SIZE="2"><B>Curve analysis</B></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><A NAME="generalstrategy"></A></FONT><FONT FACE="Arial" SIZE="2"><B><I>general strategy</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">Analysis of any datasource (Measured, Calculated, Reference) is supported. In BistroMath the analysis results of the <I>filtered</I> measurement curve are presented. As first step always <I>twMaxVal</I> and <I>twMinVal</I> are determined. The normalisation point must be defined before any relative values and/or positions can be calculated.</FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><A NAME="normalisationofprofiles"></A></FONT><FONT FACE="Arial" SIZE="2"><B><I>normalisation of AB/GT-scans</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">If the origin of the scan axis is within the scan range <I>and</I> the value at the origin is within 5% of the maximum value, the origin is used as normalisation point. Else the maximum is used to calculate provisional 50%-positions. The average of these points is used as normalisation position.</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> ProfileNormalisation(AFieldClass:twcFieldClass);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> lDP,mDP: twcDoseLevel;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twAbsNormDefUse&lt;&gt;dUseUndefined </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">,twFirstScanPosCm,twLastScanPosCm) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((twOriginPosValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (wNormalisation[AFieldClass]=NormOnOrigin)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (AFieldClass=fcWedge)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormPosCm := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormDefUse:= dUseOrigin;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (wNormalisation[AFieldClass] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> [NormOnCenter,NormOnInFieldArea]) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (abs(twAbsNormPosCm-twCenterPosCm)&gt;twcSamePositionRangeCm)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormPosCm := twCenterPosCm;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormDefUse:= dUseBorder;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormValue&nbsp; := GetQfittedValue(twAbsNormPosCm,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAvgNormValue&nbsp; := twAbsNormValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAppliedNormVal:= twAbsNormValue; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{may differ afterwards}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{not undefined}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> AtBorderUserDoseLevel </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> mDP:= dUser</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mDP:= d90;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> lDP:= dLow </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> mDP </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindLevelPos(ASource,lDP);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{profilenormalisation}</I></FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><A NAME="normalisationofdepthdose"></A></FONT><FONT FACE="Arial" SIZE="2"><B><I>normalisation of depth dose scans</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">If a reference depth is available, this will be used, else the maximum is the normalisation point.:</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> VerticalScans: Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> lDP&nbsp; : twcDoseLevel;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stg&nbsp; : </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QfitMaxPos(ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormValue:= twMaxValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> lDP:= dLow </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> dTemp </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindLevelPos(ASource,lDP,False);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> twBeamInfo </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := FModNormList.ModalityFormat(twBModality,twBEnergy);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelNormPosCm&nbsp; := FModNormList.GetModDepth(Stg,False,ifthen(twIsRelative,wSource[dsMeasured].twMaxPosCm,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelNormValue&nbsp; := FModNormList.GetModValue(Stg,False);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormPosCm&nbsp; := FModNormList.GetModDepth(Stg,</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> twIsRelative,ifthen(twIsRelative,-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,wSource[dsMeasured].twMaxPosCm));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := GetQfittedValue(twAbsNormPosCm,ASource,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormConfig := (lTmp1&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> twIsRelative) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (twMaxValue/lTmp1-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">&lt;twcYtopQfitRelDif);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAppliedNormVal:= twAbsNormValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Abs(twAbsNormPosCm-twMaxPosCm)&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormDefUse:= dUseMax</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormDefUse:= dUseConfigured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twMaxPosCm&lt;twcPDDminTopCm </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormPosCm:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormDefUse:= dUseOrigin;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twAbsNormPosCm&gt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1:= FModNormList.GetModValue(Stg,</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> twIsRelative);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> lTmp1&lt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> twRefNormFactor:= GetQfittedValue(twAbsNormPosCm,ASource)/twMaxValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>finally</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> lTmp1&lt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> twRefNormFactor:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRefNormFactor:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">100</FONT><FONT FACE="Consolas" SIZE="2">/lTmp1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> twRefNormFactor:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twIsRelative </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (ASource&lt;&gt;dsMeasured) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormPosCm:= EnsureRange(wSource[dsMeasured].twAbsNormPosCm,twFirstDataPosCm,twLastDataPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelNormPosCm:= EnsureRange(wSource[dsMeasured].twRelNormPosCm,twFirstDataPosCm,twLastDataPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (twAbsNormPosCm&gt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(twAbsNormPosCm,twFirstDataPosCm,twLastDataPosCm) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormValue:= Max(twData[twMaxArr]/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">10</FONT><FONT FACE="Consolas" SIZE="2">,GetQfittedValue(twAbsNormPosCm,ASource))*twRefNormFactor;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (Abs(twMaxValue/twAbsNormValue-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">)&gt;=twcYtopQfitRelDif) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Abs(twMaxPosCm-twAbsNormPosCm)&lt;twcSamePositionRangeCm) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twMaxValue:= twAbsNormValue; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{keep relation between topmodel and normval when nomalised on top}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twAbsNormValue=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormValue:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">100</FONT><FONT FACE="Consolas" SIZE="2">*twRefNormFactor;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormPosCm := twMaxPosCm;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormValue := twMaxValue*twRefNormFactor;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAbsNormDefUse:= dUseMax;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> ((twRelNormPosCm&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(twRelNormPosCm,twFirstDataPosCm,twLastDataPosCm)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelNormPosCm:= twPosCm[twMaxArr];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelNormValue:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">100</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twBeamInfo.twBModality=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'X'</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twPDD10:= GetQfittedValue(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">10</FONT><FONT FACE="Consolas" SIZE="2">,ASource)/twAbsNormValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twPDD20:= GetQfittedValue(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">20</FONT><FONT FACE="Consolas" SIZE="2">,ASource)/twAbsNormValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twFilterPoints&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> twAvgNormValue:= twAbsNormValue&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{certify that twAvgNormval does some averaging}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAvgNormValue:= GetQfittedValue(twAbsNormPosCm,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelAvgInField&nbsp; := twAvgNormValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosDefUse:= dUseUndefined;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{with}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{verticalscans}</I></FONT><BR>
<BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="2"><B><I>average normalisation value</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">When two curves are compared graphically, the influence of noise on the normalisation point can be reduced by introducing an <I>average normalisation point</I>. This is not used for other calculations.</FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><I><A NAME="d50"></A></I></FONT><FONT FACE="Arial" SIZE="2"><B><I>profile evaluation</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">For these points always the nearest array point is determined and the actual position is interpolated inbetween the two nearest array values.</FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//needs: twDataFirst,twDataLast,twMaxPosCm,twScanLength</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{17/05/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; More stable and faster version by calculating the probable position just once and</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; then reducing the search area very fast.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Introduction of ForceAlwaysIn option. For any backward compatibility the default is off,</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; resulting in -1 as out of range result.}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.NearestPosition(Position&nbsp;&nbsp;&nbsp;&nbsp; :twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForceAlwaysIn:Boolean=True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ): Integer;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i,m,n,s: Integer;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (twPoints&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (ForceAlwaysIn </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(Position,twFirstDataPosCm,twLastDataPosCm)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; m:= twDataFirst;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; n:= twDataLast;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; s:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i:= EnsureRange(m+round((n-m)*(Position-twPosCm[m])/(twPosCm[n]-twPosCm[m])),m,n);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (n-m&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (s&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{reduce search area by replacing m or n boundary with estimate}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s:= Sign(Position-twPosCm[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (s&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> m:= i</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n:= i;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (s&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i:= (n+m) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//replace n or m with avg(n,m)</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= ifthen(Abs(Position-twPosCm[m])&lt;Abs(twPosCm[n]-Position),m,n);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= -</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{twellhoferdata.nearestposition}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{19/05/2015}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.NextPos(APos&nbsp;&nbsp; :twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource:twcDataSource=dsMeasured): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i: Integer;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">i:= NearestPosition(APos,ASource);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> i&lt;wSource[ASource].twDataLast </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= wSource[ASource].twPosCm[Succ(i)]</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= APos;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~nextpos}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//this version performs well for inverted data with vertical slopes</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{26/10/2018 force use of linear fit for less than three points}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.CalcValue(Lpos,Rpos&nbsp; :Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InverseCalc:Boolean=False): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> Q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : TQuadFit;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i,CentralPos: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Xarr,Yarr&nbsp;&nbsp; : twcFloatArray;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InverseCalc </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp; Xarr:= twData;&nbsp;&nbsp; Yarr:= twPosCm;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp; Yarr:= twData;&nbsp;&nbsp; Xarr:= twPosCm;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(LPos,twDataFirst,twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rpos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := EnsureRange(Rpos,LPos,twDataLast);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CentralPos:= (Lpos+Rpos) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q:= TQuadFit.Create(Rpos-Lpos+</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= Yarr[CentralPos];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Rpos-Lpos=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Xarr[Lpos]=Xarr[Rpos] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= (Yarr[Lpos]+Yarr[Rpos])/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Yarr[Lpos]=Yarr[Rpos] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= Yarr[Lpos]</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Rpos=Lpos </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{interpolatie tussen twee punten}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Lpos=twScanFirst </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lpos:= Succ(Lpos);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rpos:= Lpos;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Rpos=twScanLast&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lpos:= Pred(Rpos);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rpos:= Lpos;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Xarr[Lpos]&gt;=X </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Xarr[Pred(Lpos)]&lt;X </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Dec(Lpos)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Rpos);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Xarr[Pred(Lpos)]&gt;=X </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Dec(Lpos)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Rpos);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= Lpos </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> Rpos </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Add_XY(Xarr[i],Yarr[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Q.FitValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:=</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.FitLin(X);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= Lpos </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> Rpos </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Add_XY(Xarr[i],Yarr[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Q.FitValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= Q.FitQuad(X,wOutlierFilter);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= Yarr[CentralPos];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeAndNil(Q);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExceptMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'WH.CalcValue!'</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{twellhoferdata.calcvalue}</I></FONT><BR>
<BR>
<BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{15/08/2015}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.GetInterpolatedValue(Position&nbsp;&nbsp;&nbsp; :twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DefaultValue:twcFloatType=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i,j,k: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; d&nbsp;&nbsp;&nbsp; : twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">i:= NearestPosition(Position,ASource,False);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> i&gt;=twDataFirst </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; d:= Position-twPosCm[i];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Abs(d)&lt;wSamePositionRadiusCm </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= twData[i]</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k:= ifthen(d&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j:= i+k;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(j,twdataFirst,twDatalast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j:= i-k;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twPosCm[j]=twPosCm[i] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= (twData[i]+twData[j])/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= twData[i]+(twData[j]-twData[i])*d/(twPosCm[j]-twPosCm[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= DefaultValue;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~getinterpolatedvalue}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.GetQfittedValue(Position&nbsp;&nbsp;&nbsp; :twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DefaultValue:twcFloatType =</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> Lpos,Rpos: Integer;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FindCalcRange(Position,Lpos,Rpos,ASource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= CalcValue(Lpos,Rpos,Position,ASource)</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= DefaultValue;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~getqfittedvalue}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.FindCalcRange(CalcPosCm&nbsp;&nbsp;&nbsp; :twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> Lpos,Rpos:Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured): Boolean;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> X: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= twValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(CalcPosCm,twFirstDataPosCm,twLastDataPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; X:= CalcPosCm-CalcWidth_cm/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> (InRange(Lpos,twDataFirst,twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twPosCm[Lpos]&lt;X)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lpos:= twDataFirst;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (Lpos&lt;=twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twPosCm[Lpos]&lt;X) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Lpos);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp; := X+CalcWidth_cm;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Rpos:= Lpos;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (Succ(Rpos)&lt;=twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twPosCm[Succ(Rpos)]&lt;=X) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Rpos);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~findcalcrange}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><I><A NAME="penumbra_evaluation"></A></I></FONT><FONT FACE="Arial" SIZE="2"><B><I>calculation of d</I></B></FONT><FONT FACE="Arial" SIZE="1"><B><I>20</I></B></FONT><FONT FACE="Arial" SIZE="2"><B><I>,d</I></B></FONT><FONT FACE="Arial" SIZE="1"><B><I>50</I></B></FONT><FONT FACE="Arial" SIZE="2"><B><I>,d</I></B></FONT><FONT FACE="Arial" SIZE="1"><B><I>80</I></B></FONT><FONT FACE="Arial" SIZE="2"><B><I>,d</I></B></FONT><FONT FACE="Arial" SIZE="1"><B><I>90,dUser,dEdge,dLow,dHigh</I></B></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/07/2020 taken out of findlevelpos; completely revieuwed}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{18/07/2020 tSource always defined}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{19/07/2020 wSmallFielddetection,wSmallFieldLimitCm}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{20/07/2020 implementation of fcSmall</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; synchronise twSetFieldType}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/07/2020 GetAdjustedFilterWidthCm}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{27/08/2020 twMaxPosCm, twMaxValue}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.FindEdge(ASource:twcDataSource=dsMeasured): Boolean;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> FieldClass&nbsp;&nbsp; : twcFieldClass;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; SigmoidNeeded: Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; tSource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcDataSource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcDoseLevel;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> SetCenterOnPenumbra(ALevel:twcDoseLevel): Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource],twLevelPos[ALevel] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Penumbra[twcLeft].Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> Penumbra[twcRight].Valid;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosValid:= Result;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm&nbsp;&nbsp;&nbsp; := GetFieldCenterCm(ASource,ALevel);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosDefUse:= GetRelatedPositionType(ALevel);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{setcenteronpenumbra}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= ScanType </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> twcHoriScans;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//(dLow,dHigh,d20,d50,d80,d90,dUser,dDerivative,dInflection,dSigmoid50,dTemp)</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource].twFastScan </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FastScan(ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wFieldTypeDetection[fcSmall] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; p:= wEdgeMethod[fcPrimary,fcSmall];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> BordersValid(ASource,p) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindLevelPos(ASource,p);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Inrange(GetFieldWidthCm(ASource,p),</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.05</FONT><FONT FACE="Consolas" SIZE="2">,wSmallFieldLimitCm) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource].twSetFieldType:= fcSmall;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; FieldClass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := wSource[ASource].twSetFieldType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; SigmoidNeeded&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := (wSource[ASource].twUsedEdgeLevel&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> [dInflection,dSigmoid50]) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (wEdgeMethod[fcPrimary,FieldClass] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> [dInflection,dSigmoid50]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; wSource[ASource].twCenterPosValid:= False;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//reset key elements</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; wSource[ASource].twInFieldAreaOk := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; tSource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := ASource;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//initially tSource is equal to ASource</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wApplyUserLevel </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource].twUsedEdgeLevel:= dUser</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource].twUsedEdgeLevel:= wEdgeMethod[fcPrimary,FieldClass];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (wEdgeDetect </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> wFieldTypeDetection[fcFFF] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[ASource].twUsedEdgeLevel=dDerivative) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> SigmoidNeeded) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource].twIsRelative) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (ASource&lt;&gt;dsBuffer) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (ASource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> twcFilteredCopies) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tSource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := twcCoupledFiltered[ASource];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//tSource is unfiltered data if available</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[tSource].twSetFieldType:= wSource[ASource].twSetFieldType;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//synchronise fieldtype for robustness</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Derive(GetAdjustedFilterWidthCm(ASource),ASource,dsBuffer);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//derivative of filtered curve is fully acceptable</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := wSource[dsBuffer].twDerivativeValid;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//set new function result</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; wSource[ASource].twDerivativeValid:= Result;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//import twDerivative results from buffer</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource].twLevelPos[dDerivative]:= wSource[dsBuffer].twLevelPos[dDerivative];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> BordersValid(tSource,d50) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindLevelPos(ASource,d50);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//the 50% level should be available as basic feature</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> wEdgeDetect </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//further analysis depends on availability of derivative and necessarity</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (wEdgeForce&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( (GetLevelDistance(dDerivative,d50,twcLeft ,tSource)&gt;wEdgeFallBackCm) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (GetLevelDistance(dDerivative,d50,twcRight,tSource)&gt;wEdgeFallBackCm)&nbsp;&nbsp; ));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource].twUsedEdgeLevel:= wEdgeMethod[fcFallBack,FieldClass];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> SigmoidNeeded </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> SigmoidPenumbraFit(tSource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//try to fit sigmoid function; always on unfiltered data (tSource)</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource].twUsedEdgeLevel:= dDerivative&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//sigmoidfit failed; fall back to derivative</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (ASource=dsMeasured) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> wApplySigmoidToBuffer </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//improved speed</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ApplySigmoidPenumbraFit(tSource,dsBuffer);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{tSource}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> tSource&lt;&gt;ASource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> p:= dInflection </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> dSigmoid50 </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource].twLevelPos[p]:= wSource[tSource].twLevelPos[p];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; wSource[ASource].twUsedEdgeLevel:= wSource[tSource].twUsedEdgeLevel;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//decisions are also based on unfiltered data</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCenterDefinition[FieldClass]=CenterPenumbra </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//check center several definitions</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetCenterOnPenumbra(twUsedEdgeLevel)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (wCenterDefinition[FieldClass]=CenterOrigin)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (twLevelPos[twUsedEdgeLevel].Penumbra[twcLeft ].Calc&lt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (twLevelPos[twUsedEdgeLevel].Penumbra[twcRight].Calc&gt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosDefUse:= dUseOrigin;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosValid := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCenterDefinition[FieldClass]=CenterMax </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm&nbsp;&nbsp;&nbsp; := twPosCm[twmaxArr];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QfitMaxPos(ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm&nbsp;&nbsp;&nbsp; := wSource[ASource].twMaxPosCm;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosDefUse:= dUseMax;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosValid := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= twCenterPosValid;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosDefUse:= dUseUndefined;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; twCenterArr:= NearestPosition(twCenterPosCm,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; twWidthCm&nbsp; := GetFieldWidthCm(ASource,twUsedEdgeLevel);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> twDerivativeValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twLevelPos[dDerivative]:= twLevelPos[twUsedEdgeLevel];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{with}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{if}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~findedge}</I></FONT><BR>
<BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><I><A NAME="flattenedarea"></A></I></FONT><FONT FACE="Arial" SIZE="2"><B><I>In-Field area</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">The In-Field area is defined here according to NCS as 80% of the 50%-width for the major axis and 70% of the 50%-width on the diagonals for fields larger than 10x10 cm and 1 cm for smaller fields. This is more complicated for fields smaller than 3 cm and fields with a missing penumbra. If there is no penumbra detected and this situation is acceptable by the user, the field limits are taken at a higher level which is guaranteed to be available at both the left and right side of the profile.</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldAreaOk:= BordersValid(ASource,dDerivative);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lSize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := GetFieldWidthCm(ASource,lDP)*twPosScaling*twcDefaultSSDcm/(twSSD_cm*twSDD2SSDratio);&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{calculate "real" field size at SSD=100}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (lSize)&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">10</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//-----------in-field area for field size &lt; 10 cm----------------------------</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{veldgrootte&lt;10 cm: 50%-breedte - 2 cm}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1:= Min(lSize/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.25</FONT><FONT FACE="Consolas" SIZE="2">,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> twLevelPos[lDP].Penumbra[twcLeft] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldPosCm[twcLeft]:= ifthen(Valid,Calc,twFirstScanPosCm)+lTmp1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldArr[twcLeft]&nbsp; := Clip(NearestPosition(twInFieldPosCm[twcLeft],ASource,False),twScanFirst,Pred(twCenterArr));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> twLevelPos[lDP].Penumbra[twcRight] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldPosCm[twcRight]:= ifthen(Valid,Calc,twLastScanPosCm )-lTmp1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldArr[twcRight]&nbsp; := Clip(NearestPosition(twInFieldPosCm[twcRight],ASource,False),Succ(twCenterArr),twScanLast);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//-----------in-field area for field size &gt;= 10 cm----------------------------</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{veldgrootte&gt;=10 cm: 70/80% van 50%-breedte}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1:=ifthen(twIsDiagonal,twcNCSInFieldDiagonal,twcNCSInFieldAxis);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> twLevelPos[lDP].Penumbra[twcLeft] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldPosCm[twcLeft]:= Max(twFirstScanPosCm,(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">-lTmp1)*twCenterPosCm+lTmp1*ifthen(Valid,Calc,twFirstScanPosCm));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldArr[twcLeft]&nbsp; := Min(twCenterArr,ifthen(Valid,Nearest,twScanFirst));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (twPosCm[twInFieldArr[twcLeft]]&lt;twInFieldPosCm[twcLeft]) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twInFieldArr[twcLeft]&lt;twScanLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(twInFieldArr[twcLeft]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldAreaOk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldPosCm[twcLeft]:= twPosCm[twScanFirst];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldArr[twcLeft]&nbsp; := twScanFirst;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> twLevelPos[lDP].Penumbra[twcRight] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldPosCm[twcRight]:= Min((</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">-lTmp1)*twCenterPosCm+lTmp1*ifthen(Valid,Calc,twLastScanPosCm),twLastScanPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldArr[twcRight]&nbsp; := Max(twCenterArr,ifthen(Valid,Nearest,twScanLast));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (twPosCm[twInFieldArr[twcRight]]&gt;twInFieldPosCm[twcRight]) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twInFieldArr[twcRight]&gt;twInFieldArr[twcLeft]) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(twInFieldArr[twcRight]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldAreaOk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldPosCm[twcRight]:= twPosCm[twScanLast];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twInFieldArr[twcRight]&nbsp; := twScanLast;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{size&gt;=10}</I></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//------------------end in-field area-----------------------</I></FONT><BR>
<BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><I><A NAME="wedgefield"></A></I></FONT><FONT FACE="Arial" SIZE="2"><B><I>wedge field detection</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">At the initial stage of analysis a provisional R50 and R90 are calculated. When those values show a marked asymmetry it is concluded that a wedge field is analysed. In this case the edge of the field is detected form the first derivative of the profile. Positions and width are shown in a </FONT><FONT FACE="Arial" COLOR="#008080" SIZE="2">teal</FONT><FONT FACE="Arial" SIZE="2"> color.</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> twIsDerivative </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wFieldTypeDetection[fcMRlinac] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Pos(twDevice,wMRlinacTUlist)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSetFieldType:= fcMRlinac</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wFieldTypeDetection[fcWedge] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp:= (twLevelPos[d50].Penumbra[twcLeft].Calc+twLevelPos[d50].Penumbra[twcRight].Calc)/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> BordersValid(ASource,d50) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> BordersValid(ASource,d90) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((WedgeAngle&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (wWedge90ShiftFactor*twLevelPos[d90].Penumbra[twcRight].Calc&lt;lTmp) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (wWedge90ShiftFactor*twLevelPos[d90].Penumbra[twcLeft ].Calc&gt;lTmp)&nbsp;&nbsp;&nbsp; ) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSetFieldType:= fcWedge;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindEdge(ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><A NAME="symmetrycorrection"></A></FONT><FONT FACE="Arial" SIZE="2"><B><I>symmetry correction of profiles</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">Within BistroMath it is possible to correct the asymmetry of a profile as far as simple slope errors. This is done by calculating the slope over all points within the In-Field area (<I>Elevation, former:Linearity</I>). For correction a straight line with this slope is subtracted from all points in the profile.</FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{29/07/2015 postanalysis option added}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{24/06/2016 limit symmetry-correction to meaningful range}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{28/01/2018 twcCoupledSources}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.CorrectSymmetry(ASource&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostAnalysis:Boolean&nbsp;&nbsp;&nbsp;&nbsp; =True);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i,s: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; v&nbsp; : twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Analyse(ASource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twLinSlope&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (abs(twLinSlope)&lt;=twcSymCorrectionLimit)&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; s:= NearestPosition(twAbsNormPosCm,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; v:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= s </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>downto</B></FONT><FONT FACE="Consolas" SIZE="2"> twDataFirst </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (twData[i]/twAbsNormValue)&gt;twcSymCorrectionLevel </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">-twLinSlope*(twPosCm[i]-twAbsNormPosCm)/twAbsNormValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[i]:= twData[i]*v;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= Succ(s) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> twDataLast </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (twData[i]/twAbsNormValue)&gt;twcSymCorrectionLevel </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">-twLinSlope*(twPosCm[i]-twAbsNormPosCm)/twAbsNormValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[i]:= twData[i]*v;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; twSymCorrected:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; twFastScan&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ASource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> twcFilterSources </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostAnalysis:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[twcCoupledSources[ASource]].twValid:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> PostAnalysis </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Analyse(ASource,(twUsedDosePoint=dUser))</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FastScan(ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~correctsymmetry}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><STRIKE><A NAME="flatness"></A></STRIKE></FONT><FONT FACE="Arial" SIZE="2"><B><I>flatness</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">The flatness is defined as (maximum-minimum)/normalisation within the In-Field area.&nbsp;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMin:= twMaxValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMax:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{search min, max and calculate straight lijn over in-field area}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twSetFieldType=fcStandard </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LinFit.Initialize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= twInFieldArr[twcLeft] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> twInFieldArr[twcRight] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twSetFieldType=fcStandard </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LinFit.Add_XY(twPosCm[i],twData[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMin:= Min(lMin,twData[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMax:= Max(lMax,twData[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMin:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMax:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{try}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><I><A NAME="symmetry"></A></I></FONT><FONT FACE="Arial" SIZE="2"><B><I>symmetry and area ratio</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">The symmetry is defined as maximum of the ratio of two symmetrical points within the In-Field area.&nbsp;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymmetry:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{--------------- calculation of symmetry ----needs twcenterposcm =&gt; borders + fff top---}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= twCenterArr </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> Min(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*twCenterArr-twInFieldArr[twcLeft],twInFieldArr[twcRight]) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{symmetry: calculate max of ratio D[c-x]/D[c+x]}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMin:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*twCenterPosCm-twPosCm[i];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{lmin=position of opposite point}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMin:= GetQfittedValue(lMin,ASource);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{lmin=value at position of opposite point}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> lMin=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> lTmp1:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1:= GetQfittedValue(twPosCm[i],ASource,twData[i])/lMin;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{ltmp1=ratio}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(lTmp1,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.1</FONT><FONT FACE="Consolas" SIZE="2">,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">/lTmp1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{if smaller than 1 then invert}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ltmp1:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{try}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymmetry:= Max(twSymmetry,lTmp1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{symmetry is defined as maximum over all values}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{for center to right}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymmetry:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{try}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMin := (twInFieldPosCm[twcRight]-twInFieldPosCm[twcLeft])/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1:= Integrate(twCenterPosCm-lMin,twCenterPosCm,ASource,True);&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{symmetrical range around twCenterPos}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp2:= Integrate(twCenterPosCm,twCenterPosCm+lMin,ASource,True);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymAreaRatio:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*(lTmp2-lTmp1)/(lTmp1+lTmp2);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymAreaRatio:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><I><A NAME="linacerror"></A></I></FONT><FONT FACE="Arial" SIZE="2"><B><I>Linac symmetry error</I></B></FONT><BR>
<FONT FACE="Arial" SIZE="2">The symmetry is defined as maximum of the ratio of two symmetrical points within the In-Field area.&nbsp;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Sign(twLevelPos[d50].Penumbra[twcLeft].Calc)+Sign(twLevelPos[d50].Penumbra[twcRight].Calc)=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{------ calculation of twSymLinacError: left and right border should at least have opposite sign ----------}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lSize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := (twSSD_cm+twVector_ICD_cm[Start].m[Beam])*Sign(twLevelPos[d50].Penumbra[twcRight].Calc)/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">100</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := twLevelPos[d50].Penumbra[twcLeft].Nearest;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RightOutArr:= Min(NearestPosition(wLinacSymOuterRadiusCm*lSize,ASource),twLevelPos[d50].Penumbra[twcRight].Nearest);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RightInArr := NearestPosition(wLinacSymInnerRadiusCm*lSize,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ltmp2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> RightOutArr&gt;RightInArr </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= RightInArr </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> RightOutArr </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lMin:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*twCenterPosCm-twPosCm[i];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> NearestPosition(lMin,ASource)&gt;j </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp1:= lTmp1+GetQfittedValue(lMin,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lTmp2:= lTmp2+GetQfittedValue(twPosCm[i],ASource,twData[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{for}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (lTmp1+lTmp2)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymLinacError:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*(lTmp1-lTmp2)*ifthen(ScanType=snGT,wLinacSymSign[fInplane],ifthen(ScanType=snAB,wLinacSymSign[fCrossplane],</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">))/(lTmp1+lTmp2)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymLinacError:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">999</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymLinacError:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">999</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{try}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{asymmetrical profile}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSymLinacError:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">999</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>

</BODY></HTML>
