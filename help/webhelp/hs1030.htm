<HTML><HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=windows-1252">
	<TITLE>Calculation details (4)</TITLE>
	<META NAME="VIEWPORT" CONTENT="width=device-width">
	<META NAME="KEYWORDS" CONTENT="Applied methods and algoritms;calculation;filtering;flatness;flattened area;Gamma analysis;Ionisatio to Dose conversion;relative flatness;symmetry;">
	<META NAME="AUTHOR" CONTENT="Theo van Soest">
	<META NAME="GENERATOR" CONTENT="HelpScribble 8.3.0">
	<STYLE> span { display: inline-block; }</STYLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">
<P><FONT FACE="Arial" SIZE="2">
<A HREF="manual.htm">Contents</A>
 - <A HREF="idx.htm">Index</A>
 - <A HREF="hs10.htm">Previous</A>
 - <A HREF="hs12.htm">Next</A>
</FONT><HR></P>
<FONT FACE="Arial" COLOR="#0000FF" SIZE="5"><B>Calculation details (4)<HR></B></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="1"><I>general information&nbsp;</I></FONT><BR>
<FONT FACE="Arial" SIZE="2">Contents of this page:</FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1020.htm#datastructures">data structures</A></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1020.htm#prepareprofile">data preparation</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#filtering">filtering and derivative</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#references">reference curves</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#analysis">curve analysis</A></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#generalstrategy">general strategy</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#normalisationofprofiles">normalisation of AB/GT-scans</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#normalisationofdepthdose">normalisation of depth dose scans</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#symmetrycorrection">symmetry correction of profiles</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#d50">profile evaluation</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#penumbra_evaluation">penumbra evaluation</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#flattenedarea">In-Field area</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#wedgefield">wedge field detection</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#flatness">flatness</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#gamma">gamma analysis</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#symmetry">symmetry</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp; </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1022.htm#linacerror">linac symmetry error</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#matchingcode">matching (incomplete) profiles</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#mergingcode">merging partial profiles</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1030.htm#quadfit">quadratic fits</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#OD2dose">OD to dose conversion</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#ion2dose">Ionisation to dose conversion</A></FONT><BR>
<FONT FACE="Arial" SIZE="2">&nbsp;</FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs1025.htm#mayneordcode">Mayneord transform</A></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2">&nbsp;</FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><B><A NAME="filtering"></A></B></FONT><FONT FACE="Arial" SIZE="2"><B>Filtering and derivative</B></FONT><BR>
<FONT FACE="Arial" SIZE="2">Several calculations are based on filtered versions of a profile. Also the presented analysis results are based on such a "Calculated" curve. This filtering is done with a moving window in which the central point is calculated with a second order polynomal function. This gives excellent results and preserves positional information in the penumbral area. The number of points is calculated from a given filterwidth in cm and the average stepsize. </FONT><FONT FACE="Arial" SIZE="2"><A HREF="hs4.htm">The filterwidth can be configured</A></FONT><FONT FACE="Arial" SIZE="2">.</FONT><BR>
<FONT FACE="Arial" SIZE="2">The derivative is calculated by aquiring the slope of a linear fit on the local data.</FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="2"><B><I>Filters</I></B></FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="2">The quadratic filter fits a second order polynome on the area of the calculation point. Only the central value of this fit is used. There is an elaborate fallback strategy, based on statistical analysis to suppress outliers. For sparse data sets this has proven to be a good addition.</FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{29/07/2015 bugfix: make copy when no filtering is done}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{06/08/2015 twIsFiltered added</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; check on asource filterpoints instead of adestination}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{03/06/2018 initborders}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/09/2018 ResetBorderValues}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{24/05/2020 more discrete filterwidth limit in StepFilter}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/07/2020 GetAdjustedFilterWidthCm}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{03/09/2020 preserve fitted results}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.QuadFilter(cm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcFloatType =twcDefaultValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADestination&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsCalculated;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostAnalysis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :Boolean&nbsp;&nbsp;&nbsp;&nbsp; =False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AllowRepeatedFiltering:Boolean&nbsp;&nbsp;&nbsp;&nbsp; =False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResetBorderValues&nbsp;&nbsp;&nbsp;&nbsp; :Boolean&nbsp;&nbsp;&nbsp;&nbsp; =True);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> Q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : TQuadFit;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; P1,P2,Pc,n: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; tmpData&nbsp;&nbsp; : twcFloatArray;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DataPtr&nbsp;&nbsp; : twcFloatArrayPtr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Check&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF FIXED_DISTANCE_FILTER}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; kcm2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; cm2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF FIXED_DISTANCE_FILTER}</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF FIXED_DISTANCE_FILTER}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> StepFilter;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//fixed distance variant</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Pc);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> Round(twcDefDiscretisationMult*Abs(twPosCm[P1]-twPosCm[Pc]))&gt;kcm2 </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//alleviate truncation errors</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> Abs(twPosCm[P1]-twPosCm[Pc])&gt;cm2 </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Del_XY(twPosCm[P1],DataPtr^[P1]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(P1);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (P2&lt;=twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Round(twcDefDiscretisationMult*Abs(twPosCm[P2]-twPosCm[Pc]))&lt;kcm2) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//alleviate truncation errors</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (P2&lt;=twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Abs(twPosCm[P2]-twPosCm[Pc])&lt;cm2) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Add_XY(twPosCm[P2],DataPtr^[P2]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(P2);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> StepFilter;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//fixed number points variant</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource],Q </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Pc);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i:= Pc+P1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(i,twDataFirst,twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add_XY(twPosCm[i],DataPtr^[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i:= Pc-P2;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(i,twDataFirst,twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Del_XY(twPosCm[i],DataPtr^[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF FIXED_DISTANCE_FILTER}</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource].twValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> AllowRepeatedFiltering </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[ASource].twFilterPoints=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF WELLHOFER_DUMPDATA}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; CopyCurve(ASource,dsUnrelated);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (cm&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[ASource].twSetFieldType=fcSmall) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cm:= GetAdjustedFilterWidthCm(ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ASource=ADestination </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmpData:= Copy(wSource[ASource].twData);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataPtr:= @(tmpData);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CopyCurve(ASource,ADestination); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{kopieer parameters}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataPtr:= @wSource[ASource].twData;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ADestination] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twStepSizeCm&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> twFilterPoints:= Succ((Round(cm/twStepSizeCm) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">)*</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFilterPoints:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twIsFiltered&nbsp;&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twDerivativeValid:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelatedSource&nbsp; := ASource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Check&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := wOutlierFilter </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twFilterPoints&lt;=twcOutlierPointLimit);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF FIXED_DISTANCE_FILTER}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kcm2&nbsp; := Round(twcDefDiscretisationMult*cm/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//alleviate truncation errors</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cm2&nbsp; := cm/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P1&nbsp;&nbsp; := twDataFirst;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P2&nbsp;&nbsp; := P1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pc&nbsp;&nbsp; := Pred(P1);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P1&nbsp;&nbsp; := twFilterPoints </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P2&nbsp;&nbsp; := twFilterPoints-P1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pc&nbsp;&nbsp; := -P2-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF FIXED_DISTANCE_FILTER}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSNR:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twFilterPoints&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q:= TQuadFit.Create(twFilterPoints);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> Pc&lt;twDataLast </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StepFilter;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Pc&gt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[Pc]:= Q.FitQuad(twPosCm[Pc],Check);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(n);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSNR:= twSNR+Sqr(wSource[ASource].twData[pc]-twData[pc]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[Pc]:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">100</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeAndNil(Q);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExceptMessage(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'WH.QuadFit!'</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFastScan&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAnalysed&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAvgNormValue:= GetQfittedValue(twAbsNormPosCm,ADestination)*twRefNormFactor;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFilterString:= twQuadFilterStg;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (n&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twSNR&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twMaxValue&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twSNR:= SqRt(twSNR/n)/twMaxValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> twFilterPoints:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ASource=ADestination </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Finalize(tmpData);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{with}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF WELLHOFER_DUMPDATA}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DumpData(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'QuadFilter'</FONT><FONT FACE="Consolas" SIZE="2">,ADestination,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DumpData(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'Filter Points'</FONT><FONT FACE="Consolas" SIZE="2">,dsUnrelated);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> PostAnalysis </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Analyse(ADestination)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ResetBorderValues </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitBorders(ADestination,False);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//preserve fitted results</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{filtered}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (ADestination&lt;&gt;ASource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; CopyCurve(ASource,ADestination);&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{make copy if needed}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~quadfilter}</I></FONT><BR>
<BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="2">The median filter sorts the values of measurement points in the area of the calculation point. The mid value (median) is taken.&nbsp; The filter is very effective for noise reduction in flat areas. It does nothing in the penumbra area.</FONT><BR>
<BR>
<BR>
<FONT FACE="Courier" COLOR="#800000" SIZE="2"><A NAME="medianfiltercode"></A></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//http://fourier.eng.hmc.edu/e161/lectures/smooth_sharpen/node3.html</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{29/07/2015 bugfix: make copy when no filtering is done}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{06/08/2015 twIsFiltered added}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{03/06/2018 initborders}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/09/2018 ResetBorderValues}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/07/2020 GetAdjustedFilterWidthCm}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{03/09/2020 preserve fitted results}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.MedianFilter(cm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcFloatType =twcDefaultValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADestination&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsCalculated;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PostAnalysis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :Boolean&nbsp;&nbsp;&nbsp;&nbsp; =False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AllowRepeatedFiltering:Boolean&nbsp;&nbsp;&nbsp;&nbsp; =False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResetBorderValues&nbsp;&nbsp;&nbsp;&nbsp; :Boolean&nbsp;&nbsp;&nbsp;&nbsp; =True);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> MedianList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcFloatArray;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Mmid,i,j,MedianCnt: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; tmpData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcFloatArray;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DataPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcFloatArrayPtr;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> AddFilter(AValue:twcFloatType);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i:= MedianCnt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (i&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (MedianList[Pred(i)]&gt;=AValue) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{vul van start en schuif hogere waardes door}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MedianList[i]:= MedianList[Pred(i)];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Inc(MedianCnt);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; MedianList[i]:= AValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource].twValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> AllowRepeatedFiltering </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[ADestination].twFilterPoints=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (cm&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[ASource].twSetFieldType=fcSmall) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cm:= GetAdjustedFilterWidthCm(ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ASource=ADestination </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmpData:= Copy(wSource[ADestination].twData);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataPtr:= @tmpData;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CopyCurve(ASource,ADestination); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{kopieer parameters}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataPtr:= @wSource[ASource].twData;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ADestination] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twStepSizeCm&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Mmid:= Round(cm/(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*twStepSizeCm))</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mmid:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twIsFiltered&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twDerivativeValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MedianCnt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Succ(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*Mmid);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFilterPoints&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := MedianCnt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twRelatedSource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := ASource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> MedianCnt&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetLength(MedianList,MedianCnt);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= twDataFirst </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> twDataLast </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MedianCnt:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{now mediancnt holds track of actually filled data in filter}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> j:= i-Mmid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> i+Mmid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddFilter(DataPtr^[Max(twDataFirst,Min(j,twDataLast))]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[i]:= MedianList[Mmid];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAnalysed&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twAvgNormValue:= GetQfittedValue(twAbsNormPosCm,ADestination)*twRefNormFactor;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFilterString:= twMedianFilterStg;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ASource=ADestination </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Finalize(tmpData);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{with}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> PostAnalysis </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Analyse(ADestination)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ResetBorderValues </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitBorders(ADestination,False);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{filtered}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (ADestination&lt;&gt;ASource) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{nothing to do, just copy}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; CopyCurve(ASource,ADestination);&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{make copy if needed}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~medianfilter}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="2"><B><I>Derivative</I></B></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>(* ****BistroMath core function****</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>This function is original work of Theo van Soest.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>output: wSource[ADestination].twLevelPos[dDerivative], and (in most cases)</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm, twUsedEdgeLevel</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>By using statistics the correct edge can be found. A 'dead band' is created to include the umbra region, also for wedges and FFF.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>The peak in the derivative is modelled with a 2nd order polynomal to find the best possible peak position.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>*)</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{23/06/2009}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{14/07/2015 Partial edge detection is now accepted</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; More strict on false edge detection by setting rules in twMinArr and twMaxArr}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{20/07/2015 twComposite added}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{29/07/2015 prefilter option added}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{31/07/2015 statistics added to validate twminarr and twmaxarr}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{04/08/2015 alleviated statistics rules for wedged profiles}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{06/08/2015 check on twFilterPoints}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{17/12/2015 repair for local peaks}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{22/07/2016 wCenterDefinition}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{15/11/2016 twCenterPosDefUse}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{22/11/2016 ReportDifferences added}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/02/2017 check for missing penumbra: MaxArr=twScanFirst or MinArr=twScanLast}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{13/04/2017 wCenterDefinition should be used with appriate fieldclass}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{13/06/2017 div0 save division could not handle case with extremely small value (orthovolt data)}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{26/01/2018 use dsMeasured/dsRefFiltered}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{28/01/2018 twcCoupledSources}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{12/06/2018 repeated filtering on first derivative tended to shift the peak, not understood in code, probably peaks are too sharp with available points}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/09/2018 preserve borders in quadfilter}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{30/10/2019 Sampler size on create corrected}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{10/04/2020 lowerbound set to twDataFirst: Pc:= Max(twDataFirst,Pred(twScanFirst)); }</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{24/05/2020 more discrete filterwidth limit in StepFilter}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{14/07/2020 no check anymore on minimum filterwidth; any width&gt;=0 is acceptable for StepFilter}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/07/2020 GetAdjustedFilterWidthCm}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{04/09/2020 at least 3 points symmetric in StepFilter; peak modelling only when more than 2 points outside dead band}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.Derive(cm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcFloatType =twcDefaultValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASource&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADestination:twcDataSource=dsCalculated;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PreFilter&nbsp;&nbsp; :Boolean&nbsp;&nbsp;&nbsp;&nbsp; =False): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>const</B></FONT><FONT FACE="Consolas" SIZE="2"> PeakRatio=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : TLinFit;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i,j,k,n,m,P1,P2,Pc,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; MinArr,MaxArr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; tmpData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcFloatArray;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DataPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcFloatArrayPtr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Sampler&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : THistogramSampler;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : TQuadFit;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF FIXED_DISTANCE_DERIVATIVE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; kcm2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; cm2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF FIXED_DISTANCE_DERIVATIVE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DeadBandLow,DeadBandHigh,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; LocalMin,LocalMax,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Y,PeakWidth,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; GlobalMin,GlobalMax : twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; PeakAtMax,WedgedData,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; HighPassed,LowPassed: Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; fSource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : twcDataSource;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF FIXED_DISTANCE_DERIVATIVE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> StepFilter;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//fixed distance variant with at least 3 points</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; Inc(Pc);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (Round(twcDefDiscretisationMult*Abs(twPosCm[P1]-twPosCm[Pc]))&gt;kcm2) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Pc-P1&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//alleviate truncation errors</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (Abs(twPosCm[P1]-twPosCm[Pc])&gt;cm2) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Pc-P1&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L.Del_XY(twPosCm[P1],DataPtr^[P1]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(P1);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (P2&lt;=twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((P2-P1&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (Round(twcDefDiscretisationMult*Abs(twPosCm[P2]-twPosCm[Pc]))&lt;kcm2)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//alleviate 64 bit truncation errors</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (P2&lt;=twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((P2-P1&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (Abs(twPosCm[P2]-twPosCm[Pc])&lt;cm2)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L.Add_XY(twPosCm[P2],DataPtr^[P2]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(P2);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> StepFilter;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//fixed number points variant</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource],L </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; Inc(Pc);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; i:= Pc+P1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(i,twDataFirst,twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add_XY(twPosCm[i],DataPtr^[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; i:= Pc-P2;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(i,twDataFirst,twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Del_XY(twPosCm[i],DataPtr^[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF FIXED_DISTANCE_DERIVATIVE}</FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> SetGlobalMax(Y:twcFloatType);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (LocalMax&gt;GlobalMax) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (LocalMax&gt;Y) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{test previous localmax}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; wSource[ADestination].twMaxArr:= MaxArr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; GlobalMax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := LocalMax;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (LocalMin&lt;GlobalMin) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (LocalMin&lt;Y) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{test previous localmin}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; wSource[ADestination].twMinArr:= MinArr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; GlobalMin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := LocalMin;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{setglobalmax}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> FindDeadBandMinMax(FindMax:Boolean);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ADestination] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= P1 </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> P2 </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y:= twData[i];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FindMax </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Y&gt;DeadBandHigh </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (Y&gt;LocalMax) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (PeakAtMax </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (abs(twPosCm[MinArr]-twPosCm[i])&gt;PeakWidth)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{find localmax}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LocalMax:= Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxArr&nbsp; := i;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{p&gt;bandhigh}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Y&lt;DeadBandLow </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (Y&lt;LocalMin) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> PeakAtMax) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (abs(twPosCm[MaxArr]-twPosCm[i])&gt;PeakWidth)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LocalMin:= Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinArr&nbsp; := i;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{p&lt;bandlow}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetGlobalMax(Y);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; SetGlobalMax(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{finddeadbandminmax}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> RunSampler(AStart,AStop:Integer);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Sampler.Initialize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ADestination] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>repeat</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{make histogram of values of derivative with largest bin below limit}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Sampler.Samples&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sampler.NumBins:= Round(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1.5</FONT><FONT FACE="Consolas" SIZE="2">*Sampler.NumBins); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{implicit initialise}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= Max(twDataFirst,AStart) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> Min(AStop,twDataLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sampler.Add_X(twData[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>until</B></FONT><FONT FACE="Consolas" SIZE="2"> (Sampler.BinFraction[Sampler.LargestBin]&lt;twcDeriveBinFraction) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (Sampler.NumBins&gt;Sampler.Samples </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{runsampler}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource].twValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; fSource:= ASource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Inc(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> PreFilter </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ASource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> twcFilterSources </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fSource:= twcCoupledSources[ASource];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[fSource].twValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QuadFilter(-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,ASource,fSource,False);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ADestination=fSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; tmpData:= Copy(wSource[fSource].twData,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">,wSource[fSource].twPoints);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DataPtr:= @tmpData;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; CopyCurve(fSource,ADestination); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{kopieer parameters}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; DataPtr:= @wSource[fSource].twData;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ADestination] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (cm&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (twSetFieldType=fcSmall) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cm:= GetAdjustedFilterWidthCm(ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; twFilmData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twFilterPoints&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFilterPoints:= Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,Ceil(Cm/Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.0001</FONT><FONT FACE="Consolas" SIZE="2">,Abs(twStepSizeCm))));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF FIXED_DISTANCE_DERIVATIVE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; kcm2:= Round(twcDefDiscretisationMult*cm/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//alleviate truncation errors</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; cm2:= cm/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF DISCRETE_FIXED_DISTANCE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; P1 := twDataFirst;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; P2 := P1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Pc := Pred(P1);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; P1 := twFilterPoints </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; P2 := twFilterPoints-P1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Pc := -P2-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF FIXED_DISTANCE_DERIVATIVE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; L:= TLinFit.Create;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> Pc&lt;twDataLast </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StepFilter;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Pc&gt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[Pc]:= L.Linear;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//first derivative is calculated here</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[Pc]:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FreeAndNil(L);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Pc:= Max(twDataFirst,Pred(twScanFirst)); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{may be local peak}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; GlobalMin:= twData[Pc];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; GlobalMax:= GlobalMin;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> Pc&lt;twScanLast </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(Pc);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y:= twData[Pc];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Y&gt;GlobalMax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalMax:= Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxArr&nbsp;&nbsp; := Pc;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Y&lt;GlobalMin </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalMin:= Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinArr&nbsp;&nbsp; := Pc;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[Pc]:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; PeakAtMax:= GlobalMax&gt;abs(GlobalMin);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> PeakAtMax </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Abs(GlobalMin)&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1e-2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Y:= PeakRatio</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y:= abs(GlobalMax/GlobalMin); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{div0 safe}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pc:= MaxArr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Abs(GlobalMax)&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1e-2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Y:= PeakRatio</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y:= abs(GlobalMin/GlobalMax); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{div0 safe}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pc:= MinArr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Pc:= EnsureRange(Pc,Succ(twScanFirst),Pred(twScanLast));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> ((Pc-i)&gt;twScanFirst) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((Pc+i)&lt;twScanLast) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (abs(twData[Pc-i])+abs(twData[Pc+i])&gt;abs(twData[Pc])) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; PeakWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := ifthen(Y&gt;=PeakRatio,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.5</FONT><FONT FACE="Consolas" SIZE="2">)*abs(twPosCm[Pc+i]-twPosCm[Pc-i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twDerivativeValid:= (DataPtr^[twScanFirst]/twMaxValue&lt;twcDeriveMinMax) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (DataPtr^[twScanLast ]/twMaxValue&lt;twcDeriveMinMax);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twDerivativeValid:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twDerivativeValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{create histogram to find most populated band}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sampler:= THistogramSampler.Create(GlobalMin,GlobalMax,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">,twDataLast);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := TQuadFit.Create;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RunSampler(twScanFirst,twScanLast);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> LogLevel&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DeadBandLow:= Sampler.BinRangeLow;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">,Sampler.NumBins);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := (Sampler.BinRangeHigh-DeadBandLow)/P1;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Ceil(Log10(Pred(P1)));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">,Pred(Sampler.LargestBin));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := j;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (i&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Sampler.BinCounts[i]&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>repeat</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pc:= Sampler.BinCounts[i];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StatusMessage(Format(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'-&gt;Derivative[%d] bin[%*d]: %6.2f .. %6.2f: %d'</FONT><FONT FACE="Consolas" SIZE="2">,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Ord(ASource),P2,i,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DeadBandLow+i*Y,DeadBandLow+Succ(i)*Y,Pc]));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>until</B></FONT><FONT FACE="Consolas" SIZE="2"> ((i&gt;j) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Pc&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (i&gt;P1);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{loglevel}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DeadBandLow&nbsp;&nbsp;&nbsp; := Sampler.LargestBinValue-Sampler.BinSize/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{define band around largest bin}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DeadBandHigh&nbsp;&nbsp; := DeadBandLow+Sampler.BinSize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LocalMin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := DeadBandLow;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LocalMax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := DeadBandHigh;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalMin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := DeadBandLow;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalMax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := DeadBandHigh;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFilterString := twDerivativeStg;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twFastScan&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twIsDerivative := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := twScanFirst;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := twScanLast;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HighPassed&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LowPassed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> MaxArr&lt;twScanFirst+twcDeriveLookAhead </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P1:= MaxArr</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (((twData[P1]&gt;DeadBandLow)&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> HighPassed) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twData[P1]&gt;twData[P1+twcDeriveLookAhead])) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((twData[P1]&lt;DeadBandHigh) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> LowPassed)&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twData[P1]&lt;twData[P1+twcDeriveLookAhead]))&nbsp;&nbsp; ) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (P1+twcDeriveLookAhead+</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">&lt;P2) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{(above bandlow and decreasing) OR (below bandhigh and rising)}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[P1]&lt;DeadBandLow&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> LowPassed := True</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twData[P1]&gt;DeadBandHigh </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> HighPassed:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(P1);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HighPassed&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LowPassed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> MinArr&gt;twScanLast-twcDeriveLookAhead </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P2:= MinArr</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (((twData[P2]&gt;DeadBandLow ) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> HighPassed) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twData[P2]&gt;twData[P2-twcDeriveLookAhead])) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((twData[P2]&lt;DeadBandHigh) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> LowPassed)&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (twData[P2]&lt;twData[P2-twcDeriveLookAhead]))&nbsp;&nbsp; ) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (P2-twcDeriveLookAhead-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">&gt;P1) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twData[P2]&lt;DeadBandLow&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> LowPassed := True</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> twData[P2]&gt;DeadBandHigh </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> HighPassed:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(P2);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinArr:= twScanFirst;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxArr:= MinArr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindDeadBandMinMax(PeakAtMax);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//find max above dead band; set twMaxArr, twMinArr</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindDeadBandMinMax(</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> PeakAtMax);&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//find min below dead band</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twMaxPosCm:= twPosCm[twMaxArr];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//for robustness</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> twLevelPos[dDerivative] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//now set left and right derivative border position</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//Some extra measures for seriously wedged profiles; the criteria are alleviated</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y:= DataPtr^[twMaxArr]/DataPtr^[twMinArr]; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{find range in original data at peaks of derivative}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Y&lt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> WedgedData:= False</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WedgedData:= Max(Y,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">/Y)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WedgedData:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> WedgedData </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>// data ordening assumed; check if band out of lowest 10% and highest 90%</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i:= Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">10</FONT><FONT FACE="Consolas" SIZE="2">,Abs(twMaxArr-twMinArr) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">5</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j:= twcDeriveStatsBinWDiv;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sampler.NumBins:= Sampler.NumBins </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">10</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RunSampler(twMaxArr-i,twMaxArr+i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j:= twcDeriveStatsBinDiv;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Penumbra[twcLeft ].Valid:= (Sampler.LargestBin&lt;(Pred(j)*Sampler.NumBins) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> j);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> WedgedData </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sampler.NumBins:= Sampler.NumBins </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">10</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RunSampler(twMinArr-i,twMinArr+i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Penumbra[twcRight].Valid:= (Sampler.LargestBin&gt;Sampler.NumBins </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> j);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Penumbra[twcRight].Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twMinArr:= EnsureRange(twMinArr,Min(twMaxArr+</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">5</FONT><FONT FACE="Consolas" SIZE="2">,twDataLast),twDataLast)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Penumbra[twcLeft].Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twMaxArr:= EnsureRange(twMaxArr,twDataFirst,Max(twMinArr-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">5</FONT><FONT FACE="Consolas" SIZE="2">,twDataFirst));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Level:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> Penumbra[twcLeft] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//left side</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nearest:= twMaxArr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valid&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Sampler.CountAbove[Sampler.LargestBin];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//data points above dead band</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (Nearest&lt;twMinArr) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Valid) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (k&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp; := Max(twScanFirst,Nearest-k);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j&nbsp;&nbsp;&nbsp; := Nearest+k;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Calc := twPosCm[MaxArr];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (k=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (i=MaxArr) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valid:= True</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> m&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//enough points available</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Initialize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> Pc:= i </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> j </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Add_XY(twPosCm[Pc],twData[Pc]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n:= Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,k </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y:= Q.TopX;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valid:= InRange(Y,twPosCm[Nearest-n],twPosCm[Nearest+n]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Calc:= Y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//best possible calculation when enough points availabe</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(k);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCenterDefinition[twSetFieldType]=CenterPenumbra </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm&nbsp;&nbsp;&nbsp; := Calc;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosDefUse:= dUseDerivative;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> Penumbra[twcRight] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//repeat for right side</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nearest:= twMinArr;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valid&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Sampler.CountBelow[Sampler.LargestBin];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//data points below dead band</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (Nearest&gt;twMaxArr) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Valid) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (k&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp; := Nearest-k;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j&nbsp;&nbsp;&nbsp; := Min(Nearest+k,twScanLast);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Calc := twPosCm[MinArr];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (k=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (j=MinArr) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valid:= True</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> m&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//enough points available</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Initialize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k:= Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,k </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> Pc:= i </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> j </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q.Add_XY(twPosCm[Pc],twData[Pc]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n:= Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,k </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>div</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y:= Q.TopX;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valid:= InRange(Y,twPosCm[Nearest-n],twPosCm[Nearest+n]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Calc := Y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>//best possible calculation when enough points availabe</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(k);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCenterDefinition[twSetFieldType]=CenterPenumbra </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm:= (Calc+twCenterPosCm)/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twUsedEdgeLevel:= dDerivative;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> LogLevel&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StatusMessage(Format(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'-&gt;Derivative curve[%d]: %0.3f cm (%d) / %0.3f cm (%d)'</FONT><FONT FACE="Consolas" SIZE="2">,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Ord(ASource),</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Penumbra[twcLeft ].Calc,Penumbra[twcLeft ].Nearest,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Penumbra[twcRight].Calc,Penumbra[twcRight].Nearest]));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{dEdge}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeAndNil(Q);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeAndNil(Sampler);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{twEdgeDerivative, inner level}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> fSource=ADestination </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Finalize(tmpData);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; twComposite&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; twRelatedSource:= ASource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wCenterDefinition[twSetFieldType]=CenterPenumbra </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> twLevelPos[dDerivative] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosValid:= Penumbra[twcLeft].Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> Penumbra[twcRight].Valid;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> twCenterPosValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosCm&nbsp;&nbsp;&nbsp; := EnsureRange(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">,twFirstDataPosCm,twLastDataPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; twCenterPosDefUse:= dUseUndefined;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= twCenterPosCm;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{with}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF WELLHOFER_DUMPDATA}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; DumpData(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'Derive'</FONT><FONT FACE="Consolas" SIZE="2">,ADestination,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; DumpData(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'Derive Points'</FONT><FONT FACE="Consolas" SIZE="2">,dsUnrelated);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Dec(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{if}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~derive}</I></FONT><BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">ack to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><B><A NAME="matchingcode"></A></B></FONT><FONT FACE="Arial" SIZE="2"><B>Matching incomplete profiles</B></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>(* NormalisedCostFunction theory</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>105| s&nbsp; sssss&nbsp; ss ss</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp; ss&nbsp;&nbsp;&nbsp;&nbsp; ss</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp; rrr&nbsp;&nbsp; rrr&nbsp;&nbsp; rrr</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>100| r&nbsp;&nbsp; rrr&nbsp;&nbsp; rrr</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; _________________________</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; The height of sss to rrr is determined by NormFactor.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; For a too large value of NormFactor the sum of differences (over all points)</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; sss-rrr will be positive and for a too low value negative.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; By changing NormFactor from a (almost) neutral level in equal steps up and down, Nhigh and Nlow are found.</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; costfunction</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Nhigh (y=Yh, x=1+delta)</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; _________.______________x-axis (normfactor)</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; * Nlow (y=Y1, x=1-delta)</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; The crossing with the x-axis (x0) can now be found through linear interpolation.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; x0 = 2*delta/ (1 - (Yh/Yl)) + 1 - delta.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp;&nbsp; For delta a value of 0.02 is chosen.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>*)</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{14/07/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Improved initial values.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Limited match area.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Error normalised to number of matched points.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Introduced match range override.}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{15/08/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; GetInterpolatedValue used}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{31/08/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Removed matchmassage call before loop because of not initialised shiftstep}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{18/01/2017</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; reduced initial ShiftRange</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; twcMatchInclusionLimit}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{09/02/2017</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; reviewed ShiftRange, minimal value&gt;2</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; reviewed initial result}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{11/02/2017 with missinge penumbra ignore maximum and use mid of scans to initialise}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/06/2017 replaced twDataFirst/Last with twScanFirst/Last to avoid non-useful data}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{20/11/2018 until (Abs(s)&lt;=twcMaxRelMatchDif) or (twScanLast-j-twScanFirst-i&lt;30)}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.Match(ASource&nbsp;&nbsp;&nbsp; :twcDataSource=dsReference;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AReference :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResultType :twcShiftType=AbsShift;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AutoCorrect:Boolean&nbsp;&nbsp;&nbsp;&nbsp; =True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatchLimitL:twcFloatType=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatchLimitR:twcFloatType=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> s,ShiftCostFunctionStep,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; ShiftError,ShiftRange,ShiftStep,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; minError,NormValue,OriginalShift: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; MatchOk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i,j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> MatchMessage(AShift,CostFunctionResult:twcFloatType);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; StatusMessage(Format(twForMatch,[AShift,Min(CostFunctionResult,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">10</FONT><FONT FACE="Consolas" SIZE="2">),ShiftStep]));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> GetPos(ACurve :twcDataSource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LeftPos:Boolean&nbsp;&nbsp;&nbsp;&nbsp; ): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ACurve] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= twPosCm[ifthen(LeftPos,twScanFirst,twScanLast)];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{27/04/2020 NormValue was used instead of vertnorm}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> ShiftCostFunction(VertNorm:twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Signed&nbsp; :Boolean): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dif,p,v1,v2,l,m1,m2: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> MatchOk </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Dif:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; n&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; p&nbsp; := MatchLimitL;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; l&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; m1 := twcMatchInclusionLimit*wSource[ASource&nbsp;&nbsp; ].twMaxValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; m2 := twcMatchInclusionLimit*wSource[AReference].twMaxValue;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>repeat</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1:= GetQfittedValue(p,ASource,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> v1&gt;m1 </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(n);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v2:= GetInterpolatedValue(p,AReference);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> v2&gt;m2 </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(n);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1:= v1*VertNorm/v2-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Signed </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Dif:= Dif+v1</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dif:= Dif+abs(v1);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l:= l+ShiftCostFunctionStep;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p:= p+ShiftCostFunctionStep;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>until</B></FONT><FONT FACE="Consolas" SIZE="2"> p&gt;=MatchLimitR;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (n&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (MatchLimitR=MatchLimitL) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (l/(MatchLimitR-MatchLimitL)&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.5</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1000</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1000</FONT><FONT FACE="Consolas" SIZE="2">*Dif/n;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatchOk:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{shiftcostfunction}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> NormalisedShiftCostFunction(AShift:twcFloatType): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> NormDelta,NormFactor: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>array</B></FONT><FONT FACE="Consolas" SIZE="2">[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">..</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>of</B></FONT><FONT FACE="Consolas" SIZE="2"> twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; NormDelta:= twcMatchNormDeltaPercent/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">100</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Shift(OriginalShift+AShift,AbsShift,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; C[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]:= ShiftCostFunction(NormValue*(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">+NormDelta),True);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; C[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]:= ShiftCostFunction(NormValue*(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">-NormDelta),True);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (C[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]=C[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (C[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> NormFactor:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NormFactor:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*NormDelta/(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">-(C[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]/C[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">])) + </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> - NormDelta;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= ShiftCostFunction(NormValue*NormFactor,False);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> LogLevel&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; MatchMessage(AShift+ifthen(ResultType=AbsShift,OriginalShift,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">),</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{Result}</I></FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{normalisedshiftcostfunction}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{all positions here are relative, the costfunction shifts are absolute, including OriginalShift}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Inc(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">OriginalShift:= wSource[ASource].twShiftCm;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">ShiftStep&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (MatchLimitL=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (MatchLimitR=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[AReference] </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>repeat</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatchLimitL:= twData[twScanFirst+i];&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{first inspect and limit vertical range}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatchLimitR:= twData[twScanLast -j];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := MatchLimitL-MatchLimitR;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Abs(s)&gt;twcMaxRelMatchDif </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> s&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Inc(j)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>until</B></FONT><FONT FACE="Consolas" SIZE="2"> (Abs(s)&lt;=twcMaxRelMatchDif) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (twScanLast-j-twScanFirst-i&lt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">30</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; MatchLimitL:= twPosCm[twScanFirst+i];&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{now adjust horizontal range}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; MatchLimitR:= twPosCm[twScanLast -j];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">ShiftCostFunctionStep:= Max(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0.000001</FONT><FONT FACE="Consolas" SIZE="2">,Abs(Min(wSource[ASource].twStepSizeCm,wSource[AReference].twStepSizeCm)/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">ShiftRange&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Min(Abs(wSource[ASource].twLastDataPosCm -wSource[AReference].twLastDataPosCm),</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Abs(wSource[ASource].twFirstDataPosCm-wSource[AReference].twFirstDataPosCm));</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; NormValue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := wSource[AReference].twAppliedNormVal/wSource[ASource].twAppliedNormVal;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; NormValue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">MatchOk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := (ShiftRange&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((MatchLimitR-MatchLimitL)/ShiftCostFunctionStep&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">5</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource&nbsp;&nbsp; ].twLevelPos[d50].Penumbra[twcLeft].Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; wSource[AReference].twLevelPos[d50].Penumbra[twcLeft].Valid&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= wSource[AReference].twLevelPos[d50].Penumbra[twcLeft].Calc-</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource&nbsp;&nbsp; ].twLevelPos[d50].Penumbra[twcLeft].Calc</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource&nbsp;&nbsp; ].twLevelPos[d50].Penumbra[twcRight].Valid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[AReference].twLevelPos[d50].Penumbra[twcRight].Valid&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= wSource[AReference].twLevelPos[d50].Penumbra[twcRight].Calc-</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ASource&nbsp;&nbsp; ].twLevelPos[d50].Penumbra[twcRight].Calc</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result&nbsp;&nbsp;&nbsp; := (MatchLimitL+MatchLimitR-GetPos(ASource,True)-GetPos(ASource,False))/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; minError&nbsp; := NormalisedShiftCostFunction(Result);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; ShiftError:= NormalisedShiftCostFunction(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{check if no shift is better result}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ShiftError&lt;minError </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">minError:= NormalisedShiftCostFunction(Result);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>repeat</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; ShiftRange:= ShiftRange/twcMatchRangeDivider;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; ShiftStep := ShiftRange/twcMatchStepsNumber;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Result-ShiftRange;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>repeat</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; ShiftError:= NormalisedShiftCostFunction(s);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ShiftError&lt;minError </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minError := ShiftError;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result&nbsp;&nbsp; := s;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; s:= s+ShiftStep;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>until</B></FONT><FONT FACE="Consolas" SIZE="2"> (s&gt;Result+ShiftRange) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> MatchOk);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; MatchMessage(Result,MinError);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>until</B></FONT><FONT FACE="Consolas" SIZE="2"> (ShiftStep&lt;ShiftCostFunctionStep) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> MatchOk);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> MatchOk </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Shift(OriginalShift+ifthen(AutoCorrect,Result,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">),AbsShift,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= Result+ifthen(ResultType=AbsShift,OriginalShift,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Dec(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~match}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><B><A NAME="quadfit"></A></B></FONT><FONT FACE="Arial" SIZE="2"><B>Quadratic fits</B></FONT><BR>
<FONT FACE="Arial" SIZE="2">Filtering and interpolation are based on a second degree model: y=a+b*x+c*sqr(x). For few datapoints with a possibly irregular distribution this might lead to extreme results. Therefore a twostep fallback to find outliers and, if still needed, a linear fit is offered.</FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>constructor</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Create(MinMaxBufferSize:Integer=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>inherited</B></FONT><FONT FACE="Consolas" SIZE="2"> Create;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Initialize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FNbuffer:= System.Abs(MinMaxBufferSize);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~create}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Initialize;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Finalize(FXbuffer);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Finalize(FYbuffer);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FillChar(FS_x ,SizeOf(FS_x) ,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FillChar(FS_xy,SizeOf(FS_xy),</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FNx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FCalc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FValid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FMinMaxValid:= False;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~initialize}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/05/2020 internal data support uTExtendedX87}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Add_XY(X,Y:Extended);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> Term: MathExt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i,j : word;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF SMART_ROUNDING}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; _X,_Y: MathExt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; FMinMaxValid:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FNx=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FMinX:= X;&nbsp; FMaxX:= X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FMinY:= Y;&nbsp; FMaxY:= Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FMinX:= Math.Min(FMinX,X);&nbsp; FMaxX:= Math.Max(FMaxX,X);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FMinY:= Math.Min(FMinY,Y);&nbsp; FMaxY:= Math.Max(FMaxY,Y);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FNbuffer&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i:= Length(FXbuffer);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> i=FNbuffer </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FXbuffer:= copy(FXbuffer,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FYbuffer:= copy(FYbuffer,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">,i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; j:= Succ(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; SetLength(FXbuffer,j);&nbsp; FXbuffer[i]:= X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; SetLength(FYbuffer,j);&nbsp; FYbuffer[i]:= Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{fnbuffer&gt;0}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Inc(FNx);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Term:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF SMART_ROUNDING}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; _X:= SmartRound(X);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; _Y:= SmartRound(Y);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp; := Term*_X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_x[i]:= FS_x[i]+Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Term&nbsp;&nbsp;&nbsp; := _Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]:= FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]+Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp;&nbsp; := Term*_X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_xy[i]:= FS_xy[i]+Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp; := Term*X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_x[i]:= FS_x[i]+Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Term&nbsp;&nbsp;&nbsp; := Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]:= FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]+Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp;&nbsp; := Term*X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_xy[i]:= FS_xy[i]+Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>on</B></FONT><FONT FACE="Consolas" SIZE="2"> EMathError </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> Initialize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FCalc := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FValid:= True;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~add_xy}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/05/2020 internal data support uTExtendedX87}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Del_XY(X,Y:Extended);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> Term: MathExt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i,j : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF SMART_ROUNDING}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; _X,_Y: MathExt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Length(FXbuffer)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; j:= Pred(Length(FXbuffer));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> (i&lt;j) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((FXbuffer[i]&lt;&gt;X) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (FYbuffer[i]&lt;&gt;Y)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> Inc(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> i&lt;j </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FXbuffer[i]:= FXbuffer[Succ(i)];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FYbuffer[i]:= FYbuffer[Succ(i)];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inc(i);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FMinX:= FXbuffer[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">];&nbsp; FMaxX:= FXbuffer[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">];&nbsp; SetLength(FXbuffer,j);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FMinY:= FYbuffer[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">];&nbsp; FMaxY:= FYbuffer[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">];&nbsp; SetLength(FYbuffer,j);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> j&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dec(j);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FMinX:= Math.Min(FXbuffer[j],FMinX);&nbsp; FMaxX:= Math.Max(FXbuffer[j],FMaxX);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FMinY:= Math.Min(FYbuffer[j],FMinY);&nbsp; FMaxY:= Math.Max(FYbuffer[j],FMaxY);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{fnbuffer&gt;0}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> FMinMaxValid:= False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Dec(FNx);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Term:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF SMART_ROUNDING}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; _X:= SmartRound(X);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; _Y:= SmartRound(Y);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp; := Term*_X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_x[i]:= FS_x[i]-Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Term&nbsp;&nbsp;&nbsp; := _Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]:= FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]-Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp;&nbsp; := Term*_X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_xy[i]:= FS_xy[i]-Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp; := Term*X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_x[i]:= FS_x[i]-Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Term&nbsp;&nbsp;&nbsp; := Y;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]:= FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]-Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Term&nbsp;&nbsp;&nbsp; := Term*X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FS_xy[i]:= FS_xy[i]-Term;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>on</B></FONT><FONT FACE="Consolas" SIZE="2"> EMathError </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> Initialize;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FCalc := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">FValid:= True;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~del_xy}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/05/2020 internal data support uTExtendedX87}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Calculate: Boolean;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> t: MathExt;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> FCalc) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> FValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FNx&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; t&nbsp;&nbsp;&nbsp;&nbsp; := FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">] - FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]*FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]/FNx;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FValid:= t&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FLL:= (FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">] - FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]*FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]/FNx) / t;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FLZ:= (FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">] - FLL*FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">])/FNx;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FNx&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t:= Det3(FNx,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2">]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FValid:= t&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>try</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FLL:= (FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">] - FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]*FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]/FNx) / (FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">] - FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]*FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]/FNx);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FLZ:= (FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">] - FLL*FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">])/FNx;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FQZ:= Det3(FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">], FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">], FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">], FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2">])&nbsp; / t;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FQL:= Det3(FNx&nbsp;&nbsp;&nbsp; ,&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">], FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">], FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">], FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">4</FONT><FONT FACE="Consolas" SIZE="2">])&nbsp; / t;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FQQ:= Det3(FNx&nbsp;&nbsp;&nbsp; ,&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">],</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">],&nbsp; FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">]) / t;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>except</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>on</B></FONT><FONT FACE="Consolas" SIZE="2"> EMathError </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp; FLZ:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; FLL:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; FQZ:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; FQL:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; FQQ:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{try}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{fnx&gt;2}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{fnx=2}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FQZ:= FLZ;&nbsp; FQL:= FLL;&nbsp; FQQ:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{fvalid}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FCalc:= FValid;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{fNx&lt;=1}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FCalc:= True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; FLZ&nbsp; := FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">];&nbsp; FLL:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; FQZ:= FLZ;&nbsp; FQL:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; FQQ:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= FCalc;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~calculate}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_Zero: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FQZ</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_zero}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_Lin: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FQL</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_lin}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_Quad: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FQQ</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_quad}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_LZero: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FLZ</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_lzero}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_TopX: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (FQQ&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= -FQL/(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">*FQQ)</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_topx}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_TopY: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (FQQ&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FitQuad(TopX)</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_topy}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_LLin: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FLL</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_llin}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_RangeX: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FNx=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= FMaxX-FMinX;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_rangex}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_RangeY: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FNx=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= FMaxY-FMinY;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_rangeY}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.FitLin(X:Extended): Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Calculate;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF SMART_ROUNDING}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= FLZ+SmartRound(X)*FLL;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= FLZ+X*FLL;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~fitlin}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/05/2020 internal data support uTExtendedX87}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.FitQuad(X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :Extended;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FallBack:Boolean=False): Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i,j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Xtmp,Ytmp: MathExt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : TStatsSampler;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : TLinFit;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF SMART_ROUNDING}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; _X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : MathExt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> FindMin(excluded:integer=-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">): integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m,n: MathExt;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; m&nbsp;&nbsp;&nbsp;&nbsp; := StatsNoresult;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> Pred(Length(FXbuffer)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> i&lt;&gt;excluded </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n:= abs(X-FXbuffer[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> n&lt;m </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m&nbsp;&nbsp;&nbsp;&nbsp; := n;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= i;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{for}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; L.Add_XY(FXbuffer[Result],FYbuffer[Result]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{findmin}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Calculate;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$IFDEF SMART_ROUNDING}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">_X:= SmartRound(X);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= FQZ+(FQL+FQQ*_X)*_X;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ELSE}</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= FQZ+(FQL+FQQ*X)*X;</FONT><BR>
<FONT FACE="Consolas" COLOR="#008080" SIZE="2">{$ENDIF}</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FallBack </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> FMinMaxValid </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (Length(FXbuffer)&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> InRange(X,FMinX,FMaxX) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; S:= TStatsSampler.Create(Length(FXbuffer));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>for</B></FONT><FONT FACE="Consolas" SIZE="2"> i:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>to</B></FONT><FONT FACE="Consolas" SIZE="2"> Pred(Length(FXbuffer)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> S.Add_X(FYbuffer[i]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Fallback:= (S.Samples&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">3</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> ((</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> S.InDataRange(Result)) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>or</B></FONT><FONT FACE="Consolas" SIZE="2"> (S.OutLier&lt;&gt;StatsNoresult));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Fallback </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Ytmp:= S.Outlier;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp; := Pred(Length(FXbuffer));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; j&nbsp;&nbsp; := -</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FYbuffer[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]=Ytmp </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> j:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{zoek outlier op: moet aan rand liggen}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> FYbuffer[i]=Ytmp </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> j:= i;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> j&gt;=</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Xtmp:= FXbuffer[j];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Del_XY(Xtmp,Ytmp);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S.Del_X(Ytmp);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result&nbsp; := Offset+(Linear+Quadratic*X)*X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fallback:= </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> S.InDataRange(Result);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Fallback </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L:= TLinFit.Create;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FindMin(FindMin);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= L.Offset+L.Linear*X;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L.Free;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add_XY(Xtmp,Ytmp);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S.Add_X(Ytmp);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{fallback}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; S.Free;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~fitquad}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_AverageX: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FS_x[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">]/FNx</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_averagey}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_AverageY: Extended;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Calculate </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= FS_xy[</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">]/FNx</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_averagey}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Get_Report: TQuadFitReport;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>with</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Valid := FValid;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Xtop&nbsp; := TopX;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Ytop&nbsp; := TopY;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Xmin&nbsp; := FMinX;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Ymin&nbsp; := FMinY;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Xmax&nbsp; := FMaxX;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Ymax&nbsp; := FMaxY;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Xavg&nbsp; := AverageX;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Yavg&nbsp; := AverageY;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Qofs&nbsp; := Offset;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Qlin&nbsp; := Linear;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Qquad := Quadratic;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Points:= Nx;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~get_report}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>destructor</B></FONT><FONT FACE="Consolas" SIZE="2"> TQuadFit.Destroy;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Finalize(FXbuffer);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Finalize(FYbuffer);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>Inherited</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~destroy}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I></I></FONT><BR>
<BR>
<FONT FACE="Arial" COLOR="#800000" SIZE="2"><B><A NAME="mergingcode"></A></B></FONT><FONT FACE="Arial" SIZE="2"><B>Merging partial profiless</B></FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{17/07/2015}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{19/07/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Scaleoverlap added as option.</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; In loop: switch to aSource when last point of aDestination is done by using VerPos.}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{20/07/2015 twComposite added}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{21/07/2015 total shift reported}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{24/07/2015:</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; usage of GetCurveIDString</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; Mayneordcorrection</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; shift and Mayneord always applied to lower part of data.}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{28/07/2015 analyse added}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{15/08/2015</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>&nbsp; GetInterpolatedValue used}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{17/08/2015 sort source and destination on ssd for vertscans}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{13/10/2016 SourceID:= GetCurveIDString(ASource,[StripExtension=]True)}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{13/01/2017 sort source and destination on ssd for vertscans but do not exchange}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{03/06/2018 initborders}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{27/08/2020 twMaxPosCm, twMaxValue}</I></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> TWellhoferData.Merge(ASource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :twcDataSource=dsUnrelated;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADestination :twcDataSource=dsMeasured;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShiftSourceCm:twcFloatType =</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoMatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :Boolean&nbsp;&nbsp;&nbsp;&nbsp; =True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ScaleOverlap :Boolean&nbsp;&nbsp;&nbsp;&nbsp; =True): Boolean;</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> SumSource,SumDest: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; SourceID,DestID&nbsp; : </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; tSource,tDest&nbsp;&nbsp;&nbsp; : twcDataSource;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> NextCombinedPos(APos&nbsp; :twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Source:twcDataSource=dsMeasured): twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= NextPos(APos,Source);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (Result=APos) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Source=ADestination </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Source:= ASource</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Source:= ADestination;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Result:= NextPos(APos,Source);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>procedure</B></FONT><FONT FACE="Consolas" SIZE="2"> Loop(Preparation:Boolean);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> CurPos,EndPos,VerifiedPos,c: twcFloatType;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InDest,InSource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; CurPos&nbsp;&nbsp;&nbsp;&nbsp; := Min(wSource[aSource].twFirstDataPosCm,wSource[ADestination].twFirstDataPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; EndPos&nbsp;&nbsp;&nbsp;&nbsp; := Max(wSource[aSource].twLastDataPosCm ,wSource[ADestination].twLastDataPosCm );</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; VerifiedPos:= CurPos-</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Preparation) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (SumSource&lt;&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> c:= SumDest/SumSource</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">1</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>while</B></FONT><FONT FACE="Consolas" SIZE="2"> CurPos&lt;EndPos </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>do</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{first test scaling in overlap zone}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; InSource:= InRange(CurPos,wSource[ASource&nbsp;&nbsp;&nbsp;&nbsp; ].twFirstDataPosCm,wSource[ASource&nbsp;&nbsp;&nbsp;&nbsp; ].twLastDataPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; InDest&nbsp; := InRange(CurPos,wSource[ADestination].twFirstDataPosCm,wSource[ADestination].twLastDataPosCm);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InDest </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>and</B></FONT><FONT FACE="Consolas" SIZE="2"> (CurPos&gt;VerifiedPos) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := NearestPosition(CurPos,ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VerifiedPos:= wSource[ADestination].twPosCm[i];</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> InSource </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Preparation </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{sumsource and sumdest are by defintion based on same number of points}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SumSource:= SumSource+GetInterpolatedValue(VerifiedPos,ASource&nbsp;&nbsp;&nbsp;&nbsp; );</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SumDest&nbsp; := SumDest&nbsp; +GetInterpolatedValue(VerifiedPos,ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{merge overlap}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[ADestination].twData[i]:= (wSource[ADestination].twData[i]+c*GetInterpolatedValue(VerifiedPos,ASource))/</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">2</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CurPos:= NextCombinedPos(VerifiedPos,ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{insource}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CurPos:= NextCombinedPos(CurPos,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i&nbsp;&nbsp;&nbsp;&nbsp; := NearestPosition(CurPos,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>not</B></FONT><FONT FACE="Consolas" SIZE="2"> Preparation </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{add non-overlapped portion of source}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InsertPoint(CurPos,c*GetInterpolatedValue(CurPos,ASource),wSource[ASource].twCoordinates[i],ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{loop}</I></FONT><BR>
<BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>function</B></FONT><FONT FACE="Consolas" SIZE="2"> LimitedIDstg(AString:</FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">): </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>String</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>var</B></FONT><FONT FACE="Consolas" SIZE="2"> i: Integer;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; i:= Pos(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'d'</FONT><FONT FACE="Consolas" SIZE="2">,AString);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> i&gt;</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><FONT FACE="Consolas" SIZE="2"> Result:= Copy(AString,</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">,i)</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result:= AString;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">Inc(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">SourceID:= GetCurveIDString(ASource&nbsp;&nbsp;&nbsp;&nbsp; ,True);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">DestID&nbsp; := GetCurveIDString(ADestination,True);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ScanType </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> twcVertScans </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; SourceID:= LimitedIDstg(SourceID);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; DestID&nbsp; := LimitedIDstg(DestID&nbsp; );</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Result:= (SourceID=DestID);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> Result </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ScanType </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>in</B></FONT><FONT FACE="Consolas" SIZE="2"> twcVertScans </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> wSource[ASource].twSSD_cm&gt;wSource[ADestination].twSSD_cm </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{tsource moet kleinste ssd hebben, daarom omwisselen}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tSource:= ADestination;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tDest&nbsp; := ASource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tSource:= ASource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tDest&nbsp; := ADestination;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Shift(ShiftSourceCm,RelShift,tSource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> (wSource[tSource].twSSD_cm&lt;&gt;wSource[tDest].twSSD_cm) </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mayneord(wSource[tSource].twSSD_cm,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[tDest&nbsp; ].twSSD_cm,</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wSource[tDest&nbsp; ].twMaxPosCm,tSource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><FONT FACE="Consolas" SIZE="2"> </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{horizontal}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Shift(ShiftSourceCm,RelShift,ASource);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> DoMatch </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShiftSourceCm:= ShiftSourceCm+Match(ASource,ADestination); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{match asource on adestination}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; SumSource:= </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; SumDest&nbsp; := </FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">0</FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>if</B></FONT><FONT FACE="Consolas" SIZE="2"> ScaleOverlap </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>then</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp;&nbsp;&nbsp; Loop(True); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{evaluate scaling factor}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Loop(False); </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{now do the actual merge}</I></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; wSource[ADestination].twDataHistoryStg:= Format(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'%s&lt;%0.2f cm&gt;%s'</FONT><FONT FACE="Consolas" SIZE="2">,[wSource[ADestination].twDataHistoryStg,ShiftSourceCm,wSource[ASource].twDataHistoryStg]);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; wSource[ADestination].twComposite&nbsp;&nbsp;&nbsp; := True;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; wSource[ADestination].twFastScan&nbsp;&nbsp;&nbsp;&nbsp; := False;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; wSource[ADestination].twRelatedSource:= ASource;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; InitBorders(ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; Result:= Analyse(ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>else</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>begin</B></FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; ReportDifferences(ASource,ADestination);</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; StatusMessage(Format(</FONT><FONT FACE="Consolas" COLOR="#0000FF" SIZE="2">'Merging not accepted (%s &lt;&gt; %s)'</FONT><FONT FACE="Consolas" SIZE="2">,[SourceID,DestID]));</FONT><BR>
<FONT FACE="Consolas" SIZE="2">&nbsp; </FONT><FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">;</FONT><BR>
<FONT FACE="Consolas" SIZE="2">Dec(FActiveCnt);</FONT><BR>
<FONT FACE="Consolas" COLOR="#000080" SIZE="2"><B>end</B></FONT><FONT FACE="Consolas" SIZE="2">; </FONT><FONT FACE="Consolas" COLOR="#008000" SIZE="2"><I>{~merge}</I></FONT><BR>
<BR>
<BR>
<FONT FACE="Arial" SIZE="1"><I><A HREF="hs1020.htm#detailslist">back to top</A></I></FONT><FONT FACE="Arial" COLOR="#800000" SIZE="2"><I>
</I></FONT>
</BODY></HTML>
